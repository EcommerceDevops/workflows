name: "üõ°Ô∏è Security Scan with Trivy"

on:
  workflow_call:
    secrets:
      GCP_SA_CREDENTIALS:
        required: true
      GCP_PROJECT:
        required: true

permissions:
  contents: read
  security-events: write # Necesario para subir los resultados a la pesta√±a de Seguridad

jobs:
  build-and-scan:
    name: Build and Scan
    runs-on: ubuntu-latest

    steps:
      # 1. Clona tu repositorio
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configura Java y Maven para construir tu proyecto
      - name: Configurar Maven settings.xml
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_PACKAGES_PAT: ${{ secrets.PACKAGE_MANAGER_PAT }}
        run: |
          mkdir -p ~/.m2
          cat << EOF > ~/.m2/settings.xml
          <?xml version="1.0" encoding="UTF-8"?>
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
                    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
                    xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0
                    http://maven.apache.org/xsd/settings-1.0.0.xsd">
            <activeProfiles>
              <activeProfile>github</activeProfile>
            </activeProfiles>
            <profiles>
              <profile>
                <id>github</id>
                <repositories>
                  <repository>
                    <id>ecommerce-pom-releases</id>
                    <name>GitHub EcommerceDevops Apache Maven Packages</name>
                    <url>https://maven.pkg.github.com/EcommerceDevops/ecommerce-parent</url>
                    <releases>
                      <enabled>true</enabled>
                    </releases>
                    <snapshots>
                      <enabled>true</enabled>
                    </snapshots>
                  </repository>
                </repositories>
              </profile>
            </profiles>
            <servers>
              <server>
                <id>ecommerce-pom-releases</id>
                <username>${GITHUB_ACTOR}</username>
                <password>${GITHUB_PACKAGES_PAT}</password>
              </server>
            </servers>
          </settings>
          EOF

      # 3. Compila el proyecto con Maven para tener el .jar listo
      # Se saltan los tests para acelerar el pipeline de seguridad
      - name: Build with Maven
        run: |
          ./mvnw clean install -DskipTests

      # 4. Construye la imagen de Docker para que est√© lista para el escaneo
      - name: Build Docker image
        id: build_image
        uses: docker/build-push-action@v5
        with:
          context: . # Directorio que contiene el Dockerfile
          push: false # No la subimos, solo la construimos
          load: true # Carga la imagen en el runner local para que Trivy la vea
          tags: shipping-service:${{ github.sha }}
          build-args: |
            PROJECT_VERSION=1.0.0

      # 5. Escanea la IMAGEN de Docker con Trivy
      # Este es el escaneo m√°s importante, ya que analiza el artefacto final
      - name: Run Trivy vulnerability scanner in image mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "image"
          image-ref: "shipping-service:${{ github.sha }}"
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH" # Falla el build si encuentra vulnerabilidades Cr√≠ticas o Altas
          ignore-unfixed: true # Ignora vulnerabilidades que a√∫n no tienen soluci√≥n

      # 6. Sube los resultados del escaneo a la pesta√±a de "Security" de GitHub
      # Este paso se ejecuta siempre, incluso si el paso anterior fall√≥, para que puedas ver el reporte.
      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"
