name: Build and Push Docker Image for Java App

on:
  workflow_call:
    secrets:
      GCP_SA_CREDENTIALS:
        required: true
      GCP_PROJECT:
        required: true
      PACKAGE_MANAGER_PAT:
        required: false
    inputs:
      IMAGE_NAME:
        type: string
        required: true
      JAVA:
        type: boolean
        default: false
      # Este input ahora recibe el tag de Git (ej: v1.2.5)
      IMAGE_VERSION:
        type: string
        required: true
      # Inputs añadidos para que el workflow sea completo y funcional
      GCP_REGISTRY_ZONE:
        type: string
        required: true
      REGISTRY_NAME:
        type: string
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code at specific tag
        uses: actions/checkout@v4
        # Se asegura de descargar el código en el estado exacto del tag
        with:
          ref: ${{ inputs.IMAGE_VERSION }}

      - name: Configurar Maven settings.xml
        if: inputs.JAVA == true
        env:
          GITHUB_USER: ${{ github.actor }}
          GITHUB_PACKAGES_PAT: ${{ secrets.PACKAGE_MANAGER_PAT }}
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 
          https://maven.apache.org/xsd/settings-1.0.0.xsd">
            <activeProfiles>
              <activeProfile>github</activeProfile>
            </activeProfiles>

            <profiles>
              <profile>
                <id>github</id>
                <repositories>
                  <repository>
                    <id>ecommerce-pom-releases</id>
                    <name>GitHub EcommerceDevops Apache Maven Packages</name>
                    <url>https://maven.pkg.github.com/EcommerceDevops/ecommerce-parent</url>
                    <releases>
                      <enabled>true</enabled>
                    </releases>
                    <snapshots>
                      <enabled>true</enabled>
                    </snapshots>
                  </repository>
                </repositories>
              </profile>
            </profiles>
            <servers>
              <server>
                <id>ecommerce-pom-releases</id>
                <username>${GITHUB_ACTOR}</username>  
                <password>${GITHUB_PACKAGES_PAT}</password>  
              </server>
            </servers>
          </settings>
          EOF

      - name: Build Java app with Maven Wrapper
        if: inputs.JAVA == true
        run: |
          if [ -f "./mvnw" ]; then
            chmod +x ./mvnw
            # Pasamos la versión al build de Maven para consistencia
            ./mvnw clean package -Drevision=${{ inputs.IMAGE_VERSION }}
          else
            echo "No se encontró ./mvnw, omitiendo compilación."
          fi

      - name: Authenticate to Google Cloud
        uses: "google-github-actions/auth@v2"
        with:
          credentials_json: ${{ secrets.GCP_SA_CREDENTIALS }}

      - name: Configure Docker for Google Artifact Registry
        run: |
          gcloud auth configure-docker ${{ inputs.GCP_REGISTRY_ZONE }}-docker.pkg.dev

      - name: Build and Push Docker images
        run: |
          # Construye la ruta completa a la imagen en Artifact Registry
          IMAGE_PATH="${{ inputs.GCP_REGISTRY_ZONE }}-docker.pkg.dev/${{ secrets.GCP_PROJECT }}/${{ inputs.REGISTRY_NAME }}/${{ inputs.IMAGE_NAME }}"
          
          # La versión se recibe directamente como un input desde el tag de Git
          VERSION="${{ inputs.IMAGE_VERSION }}"

          echo "Building image for: ${IMAGE_PATH}"
          echo "Tagging with: ${VERSION} and latest"

          # Construye la imagen con dos etiquetas: la versión específica y 'latest'
          docker build \
            --build-arg PROJECT_VERSION=${VERSION} \
            -t "${IMAGE_PATH}:${VERSION}" \
            -t "${IMAGE_PATH}:latest" .
          
          # Empuja ambas etiquetas al registry
          docker push "${IMAGE_PATH}:${VERSION}"
          docker push "${IMAGE_PATH}:latest"